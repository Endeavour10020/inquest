type ClassInfo {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  startLine: Int!
  endLine: Int!
  file: FileInfo!
  methods: [FunctionInfo!]!
  parentClass: ClassInfo
  subClasses: [ClassInfo!]!
}

input ClassInput {
  name: String!
  startLine: Int!
  endLine: Int!
  methods: [FunctionInput!]!
  classes: [ClassInput!]!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DirectoryInfo {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  subDirectories: [DirectoryInfo!]!
  parentDirectory: DirectoryInfo
  files: [FileInfo!]!
  traceSet: TraceSet!
}

input FileContentInput {
  functions: [FunctionInput!]!
  classes: [ClassInput!]!
  fileId: String!
}

type FileInfo {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  md5sum: String!
  parentDirectory: DirectoryInfo!
  traceSet: TraceSet!
  content: String!
  functions: [FunctionInfo!]!
  classes: [ClassInfo!]!
}

type FunctionInfo {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  startLine: Int!
  endLine: Int!
  file: FileInfo!
  parentClass: ClassInfo
  traces: [Trace!]!
  isMethod: Boolean!
}

input FunctionInput {
  name: String!
  startLine: Int!
  endLine: Int!
  metadata: String
}

type Mutation {
  newFileContent(fileInput: FileContentInput!): FileInfo!

  """
  returns true if the root directory was removed false if it didn't exist in the first place
  """
  removeRootDirectory: Boolean!
  publishLog(content: [String!]!): [String!]!
  newProbeFailure(newProbeFailure: NewProbeFailureInput!): ProbeFailure!
  heartbeat: Probe!
  newProbe(traceSetId: String!): Probe!
  deleteTrace(traceId: String!): Trace!
  updateTrace(updateTraceInput: UpdateTraceInput!): Trace!
  newTrace(newTraceInput: NewTraceInput!): Trace!

  """creates a traceSet with a given id"""
  newTraceSet: TraceSet!
}

input NewProbeFailureInput {
  traceId: String
  message: String!
}

input NewTraceInput {
  functionId: String!
  line: Int!
  statement: String!
  traceSetId: String!
}

type Organization {
  createdAt: DateTime!
  updatedAt: DateTime!
  traceSets: [TraceSet!]!
  users: [User!]!
}

type PasswordValidity {
  isValid: Boolean!
  errors: [String!]!
}

type Probe {
  id: String!
  lastHeartbeat: DateTime!
  closed: Boolean!
  isAlive: Boolean!
  traceLogStatuses: [TraceLogStatus!]!
  probeFailures: [ProbeFailure!]!
  traceSet: TraceSet!
  failures(
    """whether or not to include failures that also are associated to traces"""
    includeTraceAssociated: Boolean = false
  ): [ProbeFailure!]!
}

type ProbeFailure {
  createdAt: DateTime!
  updatedAt: DateTime!
  message: String!
  traceVersion: Float
  trace: Trace!
  probe: Probe!
}

type ProbeNotification {
  message: String!
  traceSet: TraceSet!
}

type Query {
  directory(directoryId: String!): DirectoryInfo
  file(fileId: String): FileInfo
  probe(probeId: String!): Probe
  thisProbe: Probe

  """creates a traceSet with a given id"""
  traceSet(traceSetId: String!): TraceSet
  me: User
}

type Subscription {
  listenLog(traceSetId: String!): [String!]!
  probeNotification(traceSetId: String!): ProbeNotification!
}

type Trace {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  function: FunctionInfo
  functionId: String
  statement: String!
  line: Float!
  active: Boolean!
  version: Float!
  traceSet: TraceSet!
  probeFailures: [ProbeFailure!]!
  currentFailures: [ProbeFailure!]!
}

type TraceLog {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: TraceLogType!
  traceSet: TraceSet!
  trace: Trace
  probe: Probe
  traceLogStatuses: [TraceLogStatus!]!
}

type TraceLogStatus {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: TraceLogStatusState!
  message: String
  probe: Probe!
  traceLog: TraceLog!
}

"""the state of the trace log status"""
enum TraceLogStatusState {
  SENT
  SUCCESS
  ERROR
}

"""type of trace log"""
enum TraceLogType {
  CREATE_TRACE
  DELETE_TRACE
  UPDATE_TRACE
  CREATE_PROBE
  DELETE_PROBE
}

type TraceSet {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  organization: [Organization!]!

  """the desired set according to this traceSet"""
  desiredSet: [Trace!]!
  liveProbes: [Probe!]
  rootDirectory: DirectoryInfo!
}

input UpdateTraceInput {
  statement: String
  active: Boolean
  id: String!
}

type User {
  id: ID!
  email: String!
  firstname: String!
  lastname: String!
  nickname: String
  organization: Organization!

  """checks the user's password"""
  isPassword(password: String!): Boolean!
}

