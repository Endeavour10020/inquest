type AbstractPythonNode {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  line: Int!
  file: FileInfo!
}

type ClassInfo {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  line: Int!
  file: FileInfo!
  methods: [FunctionInfo!]!
}

input ClassInput {
  name: String!
  line: Float!
  methods: [FunctionInput!]!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DirectoryInfo {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  subDirectories: [DirectoryInfo!]!
  parentDirectory: DirectoryInfo
  files: [FileInfo!]!
}

input FileContentInput {
  functions: [FunctionInput!]!
  classes: [ClassInput!]!
  fileId: String!
}

type FileInfo {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  parentDirectory: DirectoryInfo!
  content: String!
  functions: [FunctionInfo!]!
  classes: [ClassInfo!]!
}

type FunctionInfo {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  line: Int!
  file: FileInfo!
  parentClass: ClassInfo
  traces: [Trace!]!
  isMethod: Boolean!
}

input FunctionInput {
  name: String!
  line: Float!
  metadata: String
}

type Mutation {
  newFileContent(fileInput: FileContentInput!): FileInfo!
  publishLog(content: String!): String!
  heartbeat: Probe!
  newProbe(traceSetKey: String!): Probe!
  addRecipe(recipe: RecipeInput!): Recipe!
  rate(rate: RateInput!): Recipe!
  newTraceFailure(message: String!, traceId: String!): TraceFailure!
  deleteTrace(traceId: String!): Trace!
  updateTrace(updateTraceInput: UpdateTraceInput!): Trace!
  newTrace(newTraceInput: NewTraceInput!): Trace!

  """creates a traceSet with a given key"""
  newTraceSet(traceSetKey: String!): TraceSet!
}

input NewTraceInput {
  functionId: String!
  statement: String!
  traceSetKey: String!
}

type PasswordValidity {
  isValid: Boolean!
  errors: [String!]!
}

type Probe {
  lastHeartbeat: DateTime!
  closed: Boolean!
  key: String!
  isAlive: Boolean!
  traceLogStatuses: [TraceLogStatus!]!
  traceFailures: [TraceFailure!]!
  traceSet: TraceSet!
}

type ProbeNotification {
  message: String!
  traceSet: TraceSet!
}

type Query {
  rootDirectory: DirectoryInfo!
  directory(directoryId: String!): DirectoryInfo
  file(name: String, fileId: String): FileInfo
  probe(key: String!): Probe
  thisProbe: Probe
  recipe(recipeId: Int!): Recipe
  recipes: [Recipe!]!

  """creates a traceSet with a given key"""
  traceSet(traceSetKey: String!): TraceSet
  me: User
  liveProbes: [Probe!]
}

type Rate {
  value: Int!
  user: User!
  date: DateTime!
  recipe: Recipe!
}

input RateInput {
  recipeId: ID!
  value: Int!
}

type Recipe {
  id: ID!
  title: String!
  description: String
  ratings: [Rate!]!
  author: User!
}

input RecipeInput {
  title: String!
  description: String
}

type Subscription {
  listenLog(traceSetKey: String!): String!
  probeNotification(traceSetKey: String!): ProbeNotification!
}

type Trace {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  function: FunctionInfo
  functionId: String
  statement: String!
  active: Boolean!
  version: Float!
  traceSet: TraceSet!
  traceFailures: [TraceFailure!]!
  currentFailures: [TraceFailure!]!
}

type TraceFailure {
  createdAt: DateTime!
  updatedAt: DateTime!
  message: String!
  traceVersion: Float!
  trace: Trace!
  probe: Probe!
}

type TraceLog {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: TraceLogType!
  traceSet: TraceSet!
  trace: Trace
  probe: Probe
  traceLogStatuses: [TraceLogStatus!]!
}

type TraceLogStatus {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: TraceLogStatusState!
  message: String
  probe: Probe!
  traceLog: TraceLog!
}

"""the state of the trace log status"""
enum TraceLogStatusState {
  SENT
  SUCCESS
  ERROR
}

"""type of trace log"""
enum TraceLogType {
  CREATE_TRACE
  DELETE_TRACE
  UPDATE_TRACE
  CREATE_PROBE
  DELETE_PROBE
}

type TraceSet {
  key: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  traceLogs: [TraceLog!]!

  """the desired set according to this traceSet"""
  desiredSet: [Trace!]!
}

input UpdateTraceInput {
  statement: String
  active: Boolean
  id: String!
}

type User {
  id: ID!
  email: String!
  firstname: String!
  lastname: String!
  nickname: String

  """checks the user's password"""
  isPassword(password: String!): Boolean!
}

